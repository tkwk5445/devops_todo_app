pipeline {
    agent any
    environment {
        DOCKER_IMAGE = "tkwk5445/todo-backend" // Docker 이미지 이름 (태그 제외)
        BACKEND_REPO = "https://github.com/tkwk5445/devops_todo_app.git" // 백엔드 레포지토리 URL
        BACKEND_PATH = "backend" // 백엔드 코드 경로
        MANIFEST_REPO = "https://github.com/tkwk5445/devops_todo_manifest.git" // Manifest 저장소
    }
    stages {
        stage('Clone Repository') {
            steps {
                echo "Cloning repository: ${BACKEND_REPO}"
                git branch: 'main', url: "${BACKEND_REPO}"
            }
        }
        stage('Generate .env File') {
            steps {
                echo "Generating .env file in backend directory"
                sh '''
                echo "DB_HOST=${DB_HOST}" >> ${WORKSPACE}/backend/.env
                echo "DB_USER=${DB_USER}" >> ${WORKSPACE}/backend/.env
                echo "DB_PASSWORD=${DB_PASSWORD}" >> ${WORKSPACE}/backend/.env
                echo "DB_NAME=${DB_NAME}" >> ${WORKSPACE}/backend/.env
                echo "JWT_SECRET=${JWT_SECRET}" >> ${WORKSPACE}/backend/.env
                '''
            }
        }

        stage('Build Docker Image') {
            steps {
                echo "Building Docker image with tag: build-${BUILD_NUMBER}"
                dir(BACKEND_PATH) {
                    sh '''
                    docker build -t ${DOCKER_IMAGE}:build-${BUILD_NUMBER} .
                    
                    '''
                }
            }
        }
        stage('Push Docker Image') {
            steps {
                echo "Pushing Docker images"
                withCredentials([usernamePassword(credentialsId: 'docker-credentials', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh '''
                    docker login -u $DOCKER_USER -p $DOCKER_PASS
                    docker push ${DOCKER_IMAGE}:build-${BUILD_NUMBER}
                    docker push ${DOCKER_IMAGE}:latest
                    '''
                }
            }
        }
        stage('Update Manifest Repository') {
            steps {
                echo "Updating ArgoCD manifest repository"
                withCredentials([usernamePassword(credentialsId: 'GITHUB_CREDENTIALS', usernameVariable: 'GITHUB_USER', passwordVariable: 'GITHUB_PERSONAL_TOKEN')]) {
                    sh '''
                    # Clean up existing manifest directory if it exists
                    if [ -d manifest ]; then
                        rm -rf manifest
                    fi
                    
                    # Clone the manifest repository
                    git clone ${MANIFEST_REPO} manifest
                    git config --global user.email "tkwk5445@naver.com"
                    git config --global user.name "$GITHUB_USER"
                    cd manifest
                    
                    # Update the backend deployment manifest
                    sed -i "s|image: .*|image: ${DOCKER_IMAGE}:build-${BUILD_NUMBER}|" backend/backend-deployment.yaml
                    git add backend/backend-deployment.yaml
                    git commit -m "Updated backend image to build-${BUILD_NUMBER}"
                    git push https://${GITHUB_PERSONAL_TOKEN}@github.com/tkwk5445/devops_todo_manifest.git main
                    '''
                }
            }
        }
        stage('Clean Up Docker Images') {
            steps {
                echo "Cleaning up unused Docker images"
                sh '''
                docker image prune -f
                '''
            }
        }
    }
}
