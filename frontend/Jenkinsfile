pipeline {
    agent any
    environment {
        DOCKER_IMAGE = "tkwk5445/todo-frontend:latest" // Docker 이미지 이름
        FRONTEND_REPO = "https://github.com/tkwk5445/devops_todo_app.git" // 프론트엔드 레포지토리 URL
        FRONTEND_PATH = "frontend" // 프론트엔드 코드 경로
        MANIFEST_REPO = "https://github.com/tkwk5445/devops_todo_manifest.git" // Manifest 저장소
    }
    stages {
        stage('Clone Repository') {
            steps {
                echo "Cloning repository: ${FRONTEND_REPO}"
                git branch: 'main', url: "${FRONTEND_REPO}"
            }
        }
        stage('Generate .env File') {
            steps {
                echo "Generating .env file in frontend directory"
                sh '''
                echo "REACT_APP_API_URL=${REACT_APP_API_URL}" >> ${WORKSPACE}/frontend/.env
                '''
            }
        }

        stage('Build Docker Image') {
            steps {
                echo "Building Docker image: ${DOCKER_IMAGE}"
                dir(FRONTEND_PATH) {
                    sh 'docker build -t $DOCKER_IMAGE .' // Docker 이미지 빌드
                }
            }
        }
        stage('Push Docker Image') {
            steps {
                echo "Pushing Docker image: ${DOCKER_IMAGE}"
                withCredentials([usernamePassword(credentialsId: 'docker-credentials', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh '''
                    docker login -u $DOCKER_USER -p $DOCKER_PASS
                    docker push $DOCKER_IMAGE
                    '''
                }
            }
        }

        stage('Update Manifest Repository') {
            steps {
                echo "Updating ArgoCD manifest repository"
                withCredentials([usernamePassword(credentialsId: 'GITHUB_CREDENTIALS', usernameVariable: 'GITHUB_USER', passwordVariable: 'GITHUB_PERSONAL_TOKEN')]) {
                    sh '''
                    # Clean up existing manifest directory if it exists
                    if [ -d manifest ]; then
                        rm -rf manifest
                    fi
                    
                    # Clone the manifest repository
                    git clone ${MANIFEST_REPO} manifest
                    git config --global user.email "tkwk5445@naver.com"
                    git config --global user.name "$GITHUB_USER"
                    cd manifest
                    
                    # Update the frontend deployment manifest
                    sed -i "s|image: .*|image: ${DOCKER_IMAGE}:build-${BUILD_NUMBER}|" frontend/frontend-deployment.yaml
                    git add frontend/frontend-deployment.yaml
                    git commit -m "Updated frontend image to build-${BUILD_NUMBER}"
                    git push https://${GITHUB_PERSONAL_TOKEN}@github.com/tkwk5445/devops_todo_manifest.git main
                    '''
                }
            }
        }

        stage('Clean Up Old Docker Images') {
            steps {
                echo "Cleaning up old Docker images"
                sh '''
                # 현재 빌드 태그
                CURRENT_BUILD="build-${BUILD_NUMBER}"
                
                # 관련 이미지 목록 생성
                IMAGES=$(docker images --format '{{.Repository}}:{{.Tag}}' | grep "${DOCKER_IMAGE}:build-" | sort -t '-' -k 2 -n)
                
                if [ ! -z "$IMAGES" ]; then
                    echo "Found images:"
                    echo "$IMAGES"
                    
                    # 최신 두 개 이미지를 제외한 나머지 삭제
                    IMAGES_TO_DELETE=$(echo "$IMAGES" | head -n -2)
                    
                    if [ ! -z "$IMAGES_TO_DELETE" ]; then
                        echo "Removing the following images:"
                        echo "$IMAGES_TO_DELETE"
                        echo "$IMAGES_TO_DELETE" | xargs -r docker rmi -f
                    else
                        echo "No old images to clean up"
                    fi
                else
                    echo "No images found matching ${DOCKER_IMAGE}:build-*"
                fi
                '''
            }
        }
    }
}